<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container {
            margin-top: 50px;
        }


        .form-group img {
            max-width: 100px;
            margin-bottom: 10px;
        }

        .form-group .remove-image {
            position: absolute;
            top: 0;
            right: 0;
            background: red;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            text-align: center;
            line-height: 25px;
            cursor: pointer;
        }

        .form-container {
            background-color: #f8f9fa;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .mandatory {
            color: red;
        }
    </style>
</head>

<body>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#">Admin</a></li>
            <li class="breadcrumb-item"><a href="/admin/product">Products</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Product</li>
        </ol>
    </nav>
    <div class="container">
        <h4>Edit Product</h4>
        <br>
        <div class="form-container">
            <form action="/admin/editProduct" method="post" id="edit-product-form">

                <input type="hidden" name="id" value="<%= product._id %>">



                <div class="form-group">
                    <label for="existingImages">Existing Images</label>
                    <div id="existingImages" class="d-flex flex-wrap">
                        <%if(product.image&&product.image.length>0){%>
                            <%product.image.forEach(function(img,idx){%>
                                <div class="position-relative m-2">
                                    <img src="/<%=img%>" style="max-width: 80px; max-height: 80px;">
                                    <button type="button" class="remove-image" style="position:absolute;top:0;right:0;"
                                        onclick="removeImage('<%= product._id %>','<%= img %>', this)">
                                        &times;
                                    </button>
                                </div>
                                <%})%>
                                    <%}%>
                    </div>
                </div>
                <!-- remove / delete existing image -->
                <script>
                    function removeImage(productId, imgPath, buttonEl) {
                        if (!confirm("Delete this image?")) return;
                        fetch(`/admin/deleteProductImage?id=${productId}&img=${encodeURIComponent(imgPath)}`, {
                            method: "DELETE"
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    buttonEl.parentNode.remove();
                                } else {
                                    alert(data.message || "Error deleting image");
                                }
                            })
                            .catch(() => alert("Failed to delete image"));
                    }
                </script>



                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <div class="form-group">
                    <label>Add Product Images (max 4)</label>
                    <!-- Thumbnails for selected cropped images -->
                    <div id="thumbnails" class="d-flex flex-wrap mb-3"></div>

                    <!-- Only one file input at a time -->
                    <input type="file" class="form-control mb-2" id="fileInput" accept="image/*">

                    <!-- Modal for cropping -->
                    <div id="cropperModal"
                        style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.75); align-items:center; justify-content:center; z-index:9999;">
                        <div
                            style="position:relative; margin:auto; background:#fff; padding:20px; border-radius:8px; max-width:90vw;">
                            <img id="imageToCrop" src="" style="max-width:90vw; max-height:70vh;">
                            <br>
                            <button type="button" id="cropBtn" class="btn btn-success mt-2">Crop & Add</button>
                            <button type="button" id="closeCropperBtn" class="btn btn-secondary mt-2">Cancel</button>
                        </div>
                    </div>
                </div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
                <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

                <script>
                    let croppedImages = []; // Holds objects: {blob, url}
                    const maxImages = 4;
                    const thumbnails = document.getElementById('thumbnails');
                    const fileInput = document.getElementById('fileInput');

                    // Cropper modal handling
                    const cropperModal = document.getElementById('cropperModal');
                    const imageToCrop = document.getElementById('imageToCrop');
                    let cropper = null;

                    fileInput.addEventListener('change', function (e) {
                        if (!this.files.length) return;
                        const file = this.files[0];
                        // Show modal and initialize cropper
                        const reader = new FileReader();
                        reader.onload = function (evt) {
                            imageToCrop.src = evt.target.result;
                            cropperModal.style.display = 'flex';
                            if (cropper) cropper.destroy();
                            cropper = new Cropper(imageToCrop, {
                                aspectRatio: 1,
                                viewMode: 1
                            });
                        };
                        reader.readAsDataURL(file);
                    });

                    document.getElementById('closeCropperBtn').onclick = function () {
                        cropperModal.style.display = 'none';
                        if (cropper) cropper.destroy();
                        fileInput.value = '';
                    };

                    document.getElementById('cropBtn').onclick = function () {
                        if (!cropper) return;
                        cropper.getCroppedCanvas().toBlob(blob => {
                            // Make a preview for the thumbnail
                            const url = URL.createObjectURL(blob);
                            croppedImages.push({ blob, url });

                            // Add thumbnail with remove icon
                            const thumbDiv = document.createElement('div');
                            thumbDiv.className = "position-relative m-2";
                            thumbDiv.style.display = "inline-block";
                            const img = document.createElement('img');
                            img.src = url;
                            img.style = "max-width:80px;max-height:80px;";
                            const btn = document.createElement('button');
                            btn.type = "button";
                            btn.className = "remove-image";
                            btn.textContent = "Ã—";
                            btn.onclick = function () {
                                // Remove from array and DOM
                                const idx = Array.from(thumbnails.children).indexOf(thumbDiv);
                                croppedImages.splice(idx, 1);
                                thumbDiv.remove();
                                // If less than maxImages, show new browser
                                checkShowFileInput();
                            };
                            thumbDiv.appendChild(img);
                            thumbDiv.appendChild(btn);
                            thumbnails.appendChild(thumbDiv);

                            // Reset and possibly add another file input
                            cropperModal.style.display = "none";
                            cropper.destroy();
                            cropper = null;
                            fileInput.value = '';
                            checkShowFileInput();
                        }, 'image/jpeg');
                    };

                    function checkShowFileInput() {
                        fileInput.style.display = croppedImages.length < maxImages ? "" : "none";
                    }
                    checkShowFileInput();

                    // When submitting, append all cropped images to FormData
                    document.getElementById('edit-product-form').addEventListener('submit', function (e) {
                        // This assumes you want to handle the images with Ajax.
                        // To submit via Ajax:
                        e.preventDefault();
                        let fd = new FormData(this);
                        croppedImages.forEach((cimg, i) => fd.append('newImages', cimg.blob, `image${i}.jpg`));
                        fetch('/admin/editProduct',
                            {
                                method: 'POST',
                                body: fd
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert("Product updated!");
                                    window.location.href = "/admin/product"; // Or your redirect logic
                                } else {
                                    alert(data.message || "Error saving product.");
                                }
                            })
                            .catch(err => {
                                alert("Submission failed.");
                                console.error(err);
                            })
                        // To submit via regular form POST, you'll need a little trick:
                        croppedImages.forEach((cimg, i) => {
                            let fileInput = document.createElement('input');
                            fileInput.type = 'hidden';
                            fileInput.name = 'newCroppedImages[]'; // make sure backend handles this
                            fileInput.value = cimg.url; // base64 or blob data unsupported: must use Ajax or convert to base64
                            this.appendChild(fileInput);
                        });
                    });
                </script>

                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->
                <!--  -->



                <div class="form-group">
                    <label for="bookName">Book Name <span class="mandatory">*</span></label>
                    <input type="text" class="form-control" id="bookName" name="productName"
                        value="<%=product.productName%>">
                    <div class="text-danger" id="name-error"></div>
                </div>

                <div class="form-group">
                    <label for="authorName">Author Name</label>
                    <input type="text" class="form-control" id="authorName" name="authorName"
                        value="<%=product.authorName%>">
                    <div class="text-danger" id="auther-name-error"></div>
                </div>

                <div class="form-group">
                    <label for="category">Category <span class="mandatory">*</span></label>
                    <select name="category" id="categories" class="form-control">
                        <% categories.forEach(cat=> { %>
                            <option value="<%= cat._id %>" <%=(cat._id.toString()===product.category.toString())
                                ? 'selected' : '' %>>
                                <%= cat.name %>
                            </option>
                            <% }) %>
                    </select>
                    <div class="text-danger" id="category-error"></div>
                </div>


                <div class="form-group">
                    <label for="stock">Stock</label>
                    <select class="form-control" name="status" id="stock">
                        <%statusOptions.forEach(options=>{%>
                            <option value="<%=options%>" <%=(options===product.status)?'selected':''%>>
                                <%=options%>
                            </option>
                            <% })%>
                    </select>
                    <div class="text-danger" id="stock-error"></div>
                </div>


                <div class="form-group">
                    <label for="publishedDate">Published Date</label>
                    <input name="publishDate" type="date" class="form-control" id="publishedDate"
                        value="<%=product.publishDate ? product.publishDate.toISOString().substring(0,10):''%>">
                    <div class="text-danger" id="publish-date-error"></div>
                </div>

                <div class="form-group">
                    <label for="publisher">Publisher</label>
                    <input name="publisher" type="text" class="form-control" id="publisher"
                        value="<%=product.publisher%>">
                    <div class="text-danger" id="publisher-error"></div>
                </div>

                <div class="form-group">
                    <label for="price">Price <span class="mandatory">*</span></label>
                    <input name="regularPrice" type="number" class="form-control" id="price"
                        value="<%=product.salePrice%>">
                    <div class="text-danger" id="price-error"></div>
                </div>

                <!--  -->
                <div class="form-group">
                    <label for="offer">Offer</label>
                    <input name="productOffer" type="text" class="form-control" id="offer"
                        value="<%=product.productOffer%> ">
                    <div class="text-danger" id="offer-error"></div>
                </div>
                <div class="form-group row" id="offer-dates">
                    <!-- Starting Offer -->
                    <div class="col-md-6">
                        <label for="startOffer">Starting Offer Date</label>
                        <input type="date" class="form-control" id="startOffer" name="startOffer"
                            value="<%=product.startOfferDate?product.startOfferDate.toISOString().substring(0,10):''%>">
                        <div class="text-danger" id="startOffer-error"></div>
                    </div>

                    <!-- Expire Offer -->
                    <div class="col-md-6">
                        <label for="expireOffer">Expire Offer Date</label>
                        <input type="date" class="form-control" id="expireOffer" name="expireOffer"
                            value="<%=product.expireOfferDate?product.expireOfferDate.toISOString().substring(0,10):''%>">
                        <div class="text-danger" id="expireOffer-error"></div>
                    </div>
                </div>
                <!-- display today and after -->
                <script>
                    window.addEventListener('DOMContentLoaded', function () {
                        const today = new Date().toISOString().split('T')[0]
                        document.getElementById('startOffer').setAttribute('min', today)
                        document.getElementById('expireOffer').setAttribute('min', today)
                    })
                </script>
                <!-- Validate Expire Date > Start Date -->
                <script>
                    document.getElementById('expireOffer').addEventListener('change', function () {
                        let expireDate = this.value
                        let startDate = document.getElementById('startOffer').value
                        let expireDateError = document.getElementById('expireOffer-error')

                        if (expireDate && startDate && expireDate <= startDate) {
                            expireDateError.textContent = 'Expire date must be after the start date.'
                            this.value = ''
                        } else {
                            expireDateError.textContent = ''
                        }
                    })
                </script>
                <script>
                        document.getElementById('offer').addEventListener('input', function () {
                            let offerVal = this.value.trim()
                            var datesContainer = document.getElementById('offer-dates')
                            if (offerVal > 0) {
                                datesContainer.style.display = ''
                            } else {
                                datesContainer.style.display = 'none'
                                
                            }
                        })
                    </script>
                <!--  -->

                <div class="form-group">
                    <label for="noOfPages">No-of Pages</label>
                    <input name="numberPage" type="text" class="form-control" id="noOfPages"
                        value="<%=product.numberPage%>">
                    <div class="text-danger" id="number-page-error"></div>
                </div>

                <div class="form-group">
                    <label for="availableQuantity">Available Quantity <span class="mandatory">*</span></label>
                    <input name="quantity" type="number" class="form-control" id="availableQuantity"
                        value="<%=product.quantity%>">
                    <div class="text-danger" id="quantity-error"></div>
                </div>

                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea name="description" class="form-control" id="description"
                        rows="3"><%=product.description%></textarea>
                    <div class="text-danger" id="description-error"></div>
                </div>

                <button type="submit" class="btn btn-dark">Save</button>
                <button type="button" class="btn btn-secondary">Cancel</button>
            </form>
        </div>
        <br><br><br>
    </div>



    <script>
        const editForm = document.getElementById('edit-product-form');

        const name = document.getElementById('bookName')
        const autherName = document.getElementById('authorName')
        const category = document.getElementById('categories')
        const stock = document.getElementById('stock')
        const publishDate = document.getElementById('publishedDate')
        const publisher = document.getElementById('publisher')
        const price = document.getElementById('price')
        const offer = document.getElementById('offer')
        const numberPage = document.getElementById('noOfPages')
        const quantity = document.getElementById('availableQuantity')
        const description = document.getElementById('description')

        const nameError = document.getElementById('name-error')
        const autherNameError = document.getElementById("auther-name-error")
        const categoryError = document.getElementById('category-error')
        const stockError = document.getElementById('stock-error')
        const publishDateError = document.getElementById("publish-date-error")
        const publisherError = document.getElementById('publisher-error')
        const priceError = document.getElementById('price-error')
        const offerError = document.getElementById('offer-error')
        const numberPageError = document.getElementById("number-page-error")
        const quantityError = document.getElementById('quantity-error')
        const descriptionError = document.getElementById("description-error")
        const startOfferError = document.getElementById('startOffer-error')
        const expireOfferError = document.getElementById("expireOffer-error")


        function nameValidationChecking(isValid) {
            const nameVal = name.value
            if (!nameVal) {
                nameError.textContent = 'Name can not be empty. Please enter name.'
                isValid = false
            } else {
                nameError.textContent = ''
            }

            return isValid
        }

        function priceValidationChecking(isValid) {
            const priceVal = price.value
            const pricePattern = /\d/
            if (!priceVal) {
                priceError.textContent = 'Poduct price can not be empty.'
                isValid = false
            } else if (!pricePattern.test(priceVal)) {
                priceError.textContent = 'Product price should be number. Please enter valid price.'
                isValid = false
            } else if (priceVal <= 0) {
                priceError.textContent = 'Price should be greater than 0.'
                isValid = false
            }
            else {
                priceError.textContent = ''
            }
            return isValid
        }

        // function offerValidationChecking(isValid) {
        //     const offerVal = offer.value
        //     const offerPattern = /\d/

        //     if (!offerPattern.test(offerVal) && offerVal) {
        //         offerError.textContent = 'Product offer should be number. Please enter valid price.'
        //         isValid = false
        //     } else if (offerVal > 100) {
        //         offerError.textContent = 'Product offer should be below 100%'
        //         isValid = false
        //     }
        //     return isValid
        // }

        function offerValidationChecking(isValid) {
            const offerVal = offer.value
            const offerPattern = /\d/
            const startOfferVal = startOffer.value
            const expireOfferVal = expireOffer.value

            offerError.textContent = '';
            expireOfferError.textContent = '';


            if (!offerPattern.test(offerVal) && offerVal) {
                offerError.textContent = 'Product offer should be number. Please enter valid price.'
                isValid = false
            } else if (offerVal > 100) {
                offerError.textContent = 'Product offer should be below 100%'
                isValid = false
            } else if (offerVal && !expireOfferVal) {
                expireOfferError.textContent = 'Expire offer date should not be empty';
                isValid = false;
            } else if (offerVal && !startOfferVal) {
                startOfferError.textContent = 'Start offer date should not be empty'
                isValid = false
            }
            return isValid
        }

        function numberOfPagesValidationChecking(isValid) {
            const numberPageVal = numberPage.value
            const numberPagePatt = /\d/

            if (!numberPagePatt.test(numberPageVal) && numberPageVal) {
                numberPageError.textContent = 'number of page should be in digits'
            } else {
                numberPageError.textContent = ''
            }
            return isValid
        }

        function quantityValidationChecking(isValid) {
            const quantityVal = quantity.value
            const quantityPatt = /\d/
            if (!quantityVal) {
                quantityError.textContent = 'Product quantity can not be empty.'
                isValid = false
            } else if (!quantityPatt.test(quantityVal)) {
                quantityError.textContent = 'Quantity should be in digit.'
                isValid = false
            } else {
                quantityError.textContent = ''
            }
            return isValid
        }


        function categoryValidationChecking(isValid) {
            const categoryVal = category.value
            if (!categoryVal || categoryVal == 'Select category') {
                categoryError.textContent = 'Category can not be empty. Please select or enter a category.'
                isValid = false
            } else {
                categoryError.textContent = ''
            }
            return isValid
        }

        editForm.addEventListener('submit', (event) => {
            let isValid = true
            isValid = nameValidationChecking(isValid)
            isValid = priceValidationChecking(isValid)
            isValid = offerValidationChecking(isValid)
            isValid = numberOfPagesValidationChecking(isValid)
            isValid = quantityValidationChecking(isValid)


            if (!isValid) {
                event.preventDefault()
            }
        })


    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

</html>